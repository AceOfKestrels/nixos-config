# .github/workflows/build.yml
name: "Parse and Build Nix Files"

on:
  push:

jobs:
  parse:
    name: Parse
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Run nix-instantiate
        run: |
          set -euo pipefail

          failures=0

          for cfg in $(git ls-files '*.nix'); do
            if nix-instantiate --parse $cfg > /dev/null; then
              echo "  ✓ $cfg"
            else
              echo "  ✗ $cfg"
              failures=$((failures+1))
            fi
          done

          if [ "$failures" -ne 0 ]; then
            echo -e "\n❌ $failures files failed parsing."
            exit 1
          else
            echo -e "\n✅ All files parsed successfully!"
          fi

  build-channels:
    name: Build with channels
    needs: [ parse ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Add Nix channels
        run: |
          nix-channel --add https://nixos.org/channels/nixos-unstable nixos
          nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
          nix-channel --add https://github.com/nix-community/plasma-manager/archive/plasma-5.tar.gz plasma-manager
          nix-channel --update

      - name: Run nix-instantiate
        run: |
          set -euo pipefail

          failures=0

          for cfg in $(git ls-files '*/devices/*.nix'); do
            echo -e "\n→ Building $cfg"

            case "$cfg" in
              */flake.nix) continue;;
              *hardware*) continue;;
            esac

            if nix-instantiate --eval \
                -E "(
                  import <nixpkgs/nixos> {
                    configuration = {
                      imports            = [ ./${cfg} ];
                      system.stateVersion = \"23.05\";
                      fileSystems.\"/\" = {
                        device = \"/\";
                        fsType = \"tmpfs\";
                      };
                    };
                  }
                ).system" \
                >/dev/null
            then
              echo "  ✓ $cfg"
            else
              echo "  ✗ $cfg"
              failures=$((failures+1))
            fi
          done

          if [ "$failures" -ne 0 ]; then
            echo -e "\n❌ $failures device config(s) failed validation."
            exit 1
          else
            echo -e "\n✅ All device configs passed!"
          fi

  build-flakes:
    name: Build with flakes
    needs: [ parse ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run nix flake check
        env:
          NIX_CONFIG: "experimental-features = nix-command flakes"
        run: |
          set -euo pipefail

          failures=0

          for cfg in $(git ls-files '*devices/*/flake.nix'); do
            echo -e "\n→ Building $cfg"

            flakeDir=$(dirname "$cfg")

            if nix flake check "./$flakeDir" >/dev/null; then
              echo "  ✓ $cfg"
            else
              echo "  ✗ $cfg"
              failures=$((failures+1))
            fi
          done

          if [ "$failures" -ne 0 ]; then
            echo -e "\n❌ $failures device config(s) failed validation."
            exit 1
          else
            echo -e "\n✅ All device configs passed!"
          fi
